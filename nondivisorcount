#include <bits/stdc++.h>
using namespace std;

vector<int> solution(vector<int> &A) {
    int N = A.size();
    unordered_map<int, int> freq;  // To store the frequency of each number in A

    // Step 1: Count the frequency of each element in A
    for (int num : A) {
        freq[num]++;
    }

    // Step 2: Create divisorCount array up to the maximum value in A
    int maxVal = *max_element(A.begin(), A.end());
    vector<int> divisorCount(maxVal + 1, 0);

    // Step 3: For each unique number, use a sieve-like method to count divisors
    for (const auto &entry : freq) {
        int num = entry.first;
        int count = entry.second;
        
        for (int multiple = num; multiple <= maxVal; multiple += num) {
            divisorCount[multiple] += count;
        }
    }

    // Step 4: Calculate non-divisors for each element in A
    vector<int> result(N, 0);
    for (int i = 0; i < N; i++) {
        result[i] = N - divisorCount[A[i]];
    }

    return result;
}
